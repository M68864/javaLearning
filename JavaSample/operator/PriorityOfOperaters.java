package operator;

public class PriorityOfOperaters
{

	public static void main(String[] args)
	{
		/*	演算子には優先順位がある
		 * 	上から優先順位が高くなる
		 * 	同じブロック内は同じ優先順位
		 * 	左から記号、名前、結合規則
		 *
		 * 	() 引数　左
		 * 	[]　配列アクセス　左
		 * 	. メンバアクセス　左
		 * 	++ 後置インクリメント　左
		 * 	-- 後置デクリメント　左
		 *
		 * 	四則演算では、優先順位が同じ場合は左から計算していく規則がある。この演算順序を左結合という。
		 * 	逆に右から評価される演算子もあり右結合という。
		 * 	例えば：　a = b = 1 　⇔　a = (b = 1)
		 *
		 *
		 * 	! 論理否定　右
		 * 	~　補数　右
		 * 	+ プラス　右
		 * 	- マイナス　右
		 * 	++ 前置インクリメント　右
		 * 	-- 前置デクリメント　右
		 *
		 *
		 * 	new オブジェクト生成　右
		 * 	() キャスト　右
		 *
		 *
		 * 	*　乗算　左
		 * 	/　除算　左
		 * 	% 剰余　左
		 *
		 *
		 * 	+ 加算　左
		 * 	- 減算　左
		 *
		 *
		 * 	<< 左シフト　左
		 * 	>>　右シフト　左
		 * 	>>> 符号なし右シフト　左
		 *
		 *
		 * 	> より大きい　左
		 * 	>= 以上　左
		 *  < 未満　左
		 *  <= 以下　左
		 *  instaceof 型比較　左
		 *
		 *
		 *  == 等価　左
		 *  != 非等価　左
		 *
		 *
		 *  & ビット論理積　左
		 *
		 *
		 *  ^　ビット排他的論理和　左
		 *
		 *
		 *  | ビット論理和　左
		 *
		 *
		 *  && 論理積　左
		 *
		 *
		 *  || 論理和　左
		 *
		 *
		 *  ?: 条件　右
		 *
		 *
		 *  = 代入　右
		 *
		 *  複合的な代入演算子 右
		 */

	}

}
